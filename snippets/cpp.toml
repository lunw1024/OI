[[snippets]]
prefix = "head"
body = """
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;
using pii = pair<int, int>;
using vi = vector<int>;

int main() {
    ios::sync_with_stdio(false); cin.tie(0);
    $0
}
"""

[[snippets]]
prefix = "BIT"
body = """struct BIT {
    int n;
    vector<int> data;
    BIT(int n) {
        this->n = n;
        data.resize(n);
    }
    inline int lowbit(int x) {
        return x & -x;
    }
    int query(int x) {
        int out = 0;
        while (x > 0) {
            out += data[x];
            x -= lowbit(x);
        }
        return out;
    }
    void add(int x, int k) {
        while (x < n) {
            data[x] += k;
            x += lowbit(x);
        }
    }
};"""

[[snippets]]
prefix = "UnionFindSet"
body = """struct UnionFindSet{
    int n;
    vector<int> fa;
    UnionFindSet(int n) {
        this->n = n;
        fa.resize(n);
        for (int i = 0; i < n; i++)
            fa[i] = i;
    }

    int find(int x) {
        return fa[x] == x ? x : fa[x] = find(fa[x]);
    }

    void merge(int x, int y) {
        x = find(x), y = find(y);
        fa[x] = y;
    }
};
"""

[[snippets]]
prefix = "Sieve"
body = """struct Sieve {
    int n;
    vector<int> isprime, prime;
    Sieve(int n) {
        this->n = n;
        isprime.resize(n, true);
        for (int i = 2; i < n; i++) {
            if (isprime[i]) {
                prime.push_back(i);
            }
            for (int j : prime) {
                if (1ll * i * j >= n)
                    break;
                isprime[i * j] = false;
                if (i % j == 0)
                    break;
            }
        }
    }
};
"""

[[snippets]]
prefix = "Mat"
body = """using mint = modint998244353;
using Mat = vector<vector<mint>>;

Mat operator*(const Mat a, const Mat b) {
    int N1 = a.size(), N2 = b[0].size(), N3 = b.size();
    Mat out(N1, vector<mint>(N2));
    for (int i = 0; i < N1; i++) {
        for (int j = 0; j < N2; j++) {
            for (int k = 0; k < N3; k++) {
                out[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    return out;
}

Mat fast_exp(Mat a, int b) {
    int N = a.size();
    Mat out(N, vector<mint>(N));
    for (int i = 0; i < N; i++)
        out[i][i] = 1;
    while (b > 0) {
        if (b & 1) {
            out = out * a;
        }
        b >>= 1;
        a = a * a;
    }
    return out;
}

void print(Mat a) {
    for (vector<mint> row : a) {
        for (mint e : row) {
            cout << e.val() << " ";
        }
        cout << endl;
    }
}
"""

[[snippets]]
prefix = "fast_pow"
body = """ll power(ll a, ll x) {
    ll out = 1;
    while (x > 0) {
        if (x & 1) {
            out = out * a % MOD;
        }
        a = a * a % MOD;
        x >>= 1;
    }
    return out;
}

ll inv(ll x) {
    return power(x, MOD - 2);
}
"""

[[snippets]]
prefix = "Dinic"
body = """struct Edge {
    int a, b, c, f;
    Edge(int a, int b, int c, int f) : a(a), b(b), c(c), f(f) {}
};

struct Dinic {
    int n, m, s, t;
    vector<Edge> edges;
    vector<vector<int>> G; // adjacency list
    vector<int> d, cur;

    Dinic(int n) : n(n) {
        G.resize(n); d.resize(n); cur.resize(n);
    }

    void addEdge(int a, int b, int c) {
        edges.push_back(Edge(a, b, c, 0));
        edges.push_back(Edge(b, a, 0, 0));
        m = edges.size();
        G[a].push_back(m - 2);
        G[b].push_back(m - 1);
    }
    
    bool bfs() {
        fill(d.begin(), d.end(), INF);
        queue<int> q;
        q.push(s);
        d[s] = 0;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int i : G[u]) {
                Edge e = edges[i];
                if (d[e.b] == INF && e.c > e.f) {
                    d[e.b] = d[e.a] + 1;
                    q.push(e.b);
                }
            }
        }
        return d[t] != INF;
    }

    int dfs(int u, int a) {
        if (u == t || a == 0)
            return a;
        int f, total = 0;
        for (int& i = cur[u]; i < G[u].size(); i++) {
            Edge& e = edges[G[u][i]];
            if (d[u] + 1 == d[e.b] && (f = dfs(e.b, min(a, e.c - e.f))) > 0) {
                e.f += f;
                edges[G[u][i] ^ 1].f -= f;
                total += f;
                a -= f;
                if (a == 0)
                    break;
            }
        }
        return total;
    }

    int maxflow(int s, int t) {
        this->s = s;
        this->t = t;
        int ans = 0;
        while (bfs()) {
            fill(cur.begin(), cur.end(), 0);
            ans += dfs(s, INF);
        }
        return ans;
    }
};
"""

[[snippets]]
prefix = "Trie"
body = """struct Trie {
    vector<array<int, VOCAB_SIZE>> children;
    vector<int> nodes;

    Trie() {
        nodes.push_back(0);
        children.emplace_back();
    }

    void insert(string s) {
        int p = 0;
        for (char c : s) {
            // cerr << c << ", " << p << ", " << int(c - 'a') << endl;
            if (children[p][c - 'a'] <= 0) {
                children[p][c - 'a'] = int(nodes.size());
                nodes.push_back(0);
                children.emplace_back();
            }
            p = children[p][c - 'a'];

            // custom logic
            nodes[p]++;
        }
    }

    // custom visit function
    ll count(string s) {
        int p = 0;
        ll out = 0;
        for (char c : s) {
            if (children[p][c - 'a'] <= 0) {
                return out;
            }
            p = children[p][c - 'a'];

            out += nodes[p];
        }
        return out;
    }
    
};
"""
