[[snippets]]
prefix = "head"
body = """
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;
using u128 = unsigned __int128;
using pii = pair<int, int>;
using vi = vector<int>;

void solve() {
    $0
}

int main() {
    ios::sync_with_stdio(false); cin.tie(nullptr);
    int T;
    cin >> T;
    while (T--) {
        solve();
    }
}
"""

[[snippets]]
prefix = "Fenwick"
body = """struct Fenwick {
    int n;
    vector<int> data;
    BIT(int n) {
        this->n = n;
        data.resize(n);
    }
    inline int lowbit(int x) {
        return x & -x;
    }
    int query(int x) {
        int out = 0;
        while (x > 0) {
            out += data[x];
            x -= lowbit(x);
        }
        return out;
    }
    void add(int x, int k) {
        while (x < n) {
            data[x] += k;
            x += lowbit(x);
        }
    }
};"""

[[snippets]]
prefix = "DSU"
body = """struct DSU {
    int n;
    vector<int> fa;
    UnionFindSet(int n) {
        this->n = n;
        fa.resize(n);
        for (int i = 0; i < n; i++)
            fa[i] = i;
    }

    int find(int x) {
        return fa[x] == x ? x : fa[x] = find(fa[x]);
    }

    void merge(int x, int y) {
        x = find(x), y = find(y);
        fa[x] = y;
    }
};
"""

[[snippets]]
prefix = "Sieve"
body = """struct Sieve {
    int n;
    vector<int> isprime, prime;
    Sieve(int n) {
        this->n = n;
        isprime.resize(n, true);
        for (int i = 2; i < n; i++) {
            if (isprime[i]) {
                prime.push_back(i);
            }
            for (int j : prime) {
                if (1ll * i * j >= n)
                    break;
                isprime[i * j] = false;
                if (i % j == 0)
                    break;
            }
        }
    }
};
"""

[[snippets]]
prefix = "fast_pow"
body = """template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
"""

[[snippets]]
prefix = "Dinic"
body = """struct Edge {
    int a, b, c, f;
    Edge(int a, int b, int c, int f) : a(a), b(b), c(c), f(f) {}
};

struct Dinic {
    int n, m, s, t;
    vector<Edge> edges;
    vector<vector<int>> G; // adjacency list
    vector<int> d, cur;

    Dinic(int n) : n(n) {
        G.resize(n); d.resize(n); cur.resize(n);
    }

    void addEdge(int a, int b, int c) {
        edges.push_back(Edge(a, b, c, 0));
        edges.push_back(Edge(b, a, 0, 0));
        m = edges.size();
        G[a].push_back(m - 2);
        G[b].push_back(m - 1);
    }
    
    bool bfs() {
        fill(d.begin(), d.end(), INF);
        queue<int> q;
        q.push(s);
        d[s] = 0;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int i : G[u]) {
                Edge e = edges[i];
                if (d[e.b] == INF && e.c > e.f) {
                    d[e.b] = d[e.a] + 1;
                    q.push(e.b);
                }
            }
        }
        return d[t] != INF;
    }

    int dfs(int u, int a) {
        if (u == t || a == 0)
            return a;
        int f, total = 0;
        for (int& i = cur[u]; i < G[u].size(); i++) {
            Edge& e = edges[G[u][i]];
            if (d[u] + 1 == d[e.b] && (f = dfs(e.b, min(a, e.c - e.f))) > 0) {
                e.f += f;
                edges[G[u][i] ^ 1].f -= f;
                total += f;
                a -= f;
                if (a == 0)
                    break;
            }
        }
        return total;
    }

    int maxflow(int s, int t) {
        this->s = s;
        this->t = t;
        int ans = 0;
        while (bfs()) {
            fill(cur.begin(), cur.end(), 0);
            ans += dfs(s, INF);
        }
        return ans;
    }
};
"""

[[snippets]]
prefix = "Trie"
body = """struct Trie {
    vector<array<int, VOCAB_SIZE>> children;
    vector<int> nodes;

    Trie() {
        nodes.push_back(0);
        children.emplace_back();
    }

    void insert(string s) {
        int p = 0;
        for (char c : s) {
            // cerr << c << ", " << p << ", " << int(c - 'a') << endl;
            if (children[p][c - 'a'] <= 0) {
                children[p][c - 'a'] = int(nodes.size());
                nodes.push_back(0);
                children.emplace_back();
            }
            p = children[p][c - 'a'];

            // custom logic
            nodes[p]++;
        }
    }

    // custom visit function
    i64 count(string s) {
        int p = 0;
        i64 out = 0;
        for (char c : s) {
            if (children[p][c - 'a'] <= 0) {
                return out;
            }
            p = children[p][c - 'a'];

            out += nodes[p];
        }
        return out;
    }
    
};
"""

[[snippets]]
prefix = "ModInt"
body = """template<class T>
constexpr T power(T a, u64 b, T res = 1) {
    for (; b != 0; b /= 2, a *= a) {
        if (b & 1) {
            res *= a;
        }
    }
    return res;
}
template<u32 P>
constexpr u32 mulMod(u32 a, u32 b) {
    return u64(a) * b % P;
}
 
template<u64 P>
constexpr u64 mulMod(u64 a, u64 b) {
    u64 res = a * b - u64(1.L * a * b / P - 0.5L) * P;
    res %= P;
    return res;
}
 
constexpr i64 safeMod(i64 x, i64 m) {
    x %= m;
    if (x < 0) {
        x += m;
    }
    return x;
}
template<unsigned_integral U, U P>
struct ModIntBase {
public:
    constexpr ModIntBase() : x(0) {}
    template<unsigned_integral T>
    constexpr ModIntBase(T x_) : x(x_ % mod()) {}
    template<signed_integral T>
    constexpr ModIntBase(T x_) {
        using S = make_signed_t<U>;
        S v = x_ % S(mod());
        if (v < 0) {
            v += mod();
        }
        x = v;
    }
    
    constexpr static U mod() {
        return P;
    }
    
    constexpr U val() const {
        return x;
    }
    
    constexpr ModIntBase operator-() const {
        ModIntBase res;
        res.x = (x == 0 ? 0 : mod() - x);
        return res;
    }
    
    constexpr ModIntBase inv() const {
        return power(*this, mod() - 2);
    }
    
    constexpr ModIntBase &operator*=(const ModIntBase &rhs) & {
        x = mulMod<mod()>(x, rhs.val());
        return *this;
    }
    constexpr ModIntBase &operator+=(const ModIntBase &rhs) & {
        x += rhs.val();
        if (x >= mod()) {
            x -= mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator-=(const ModIntBase &rhs) & {
        x -= rhs.val();
        if (x >= mod()) {
            x += mod();
        }
        return *this;
    }
    constexpr ModIntBase &operator/=(const ModIntBase &rhs) & {
        return *this *= rhs.inv();
    }
    
    friend constexpr ModIntBase operator*(ModIntBase lhs, const ModIntBase &rhs) {
        lhs *= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator+(ModIntBase lhs, const ModIntBase &rhs) {
        lhs += rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator-(ModIntBase lhs, const ModIntBase &rhs) {
        lhs -= rhs;
        return lhs;
    }
    friend constexpr ModIntBase operator/(ModIntBase lhs, const ModIntBase &rhs) {
        lhs /= rhs;
        return lhs;
    }
    
    friend constexpr istream &operator>>(istream &is, ModIntBase &a) {
        i64 i;
        is >> i;
        a = i;
        return is;
    }
    friend constexpr ostream &operator<<(ostream &os, const ModIntBase &a) {
        return os << a.val();
    }
    
    friend constexpr bool operator==(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() == rhs.val();
    }
    friend constexpr strong_ordering operator<=>(const ModIntBase &lhs, const ModIntBase &rhs) {
        return lhs.val() <=> rhs.val();
    }
    
private:
    U x;
};
 
template<u32 P>
using ModInt = ModIntBase<u32, P>;
template<u64 P>
using ModInt64 = ModIntBase<u64, P>;
"""

[[snippets]]
prefix = "Combo"
body = """using Z = ModInt<$0>
struct Comb {
    int n;
    vector<Z> _fac;
    vector<Z> _invfac;
    vector<Z> _inv;
    
    Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
    Comb(int n) : Comb() {
        init(n);
    }
    
    void init(int m) {
        if (m <= n) return;
        _fac.resize(m + 1);
        _invfac.resize(m + 1);
        _inv.resize(m + 1);
        
        for (int i = n + 1; i <= m; i++) {
            _fac[i] = _fac[i - 1] * i;
        }
        _invfac[m] = _fac[m].inv();
        for (int i = m; i > n; i--) {
            _invfac[i - 1] = _invfac[i] * i;
            _inv[i] = _invfac[i] * _fac[i - 1];
        }
        n = m;
    }
    
    Z fac(int m) {
        if (m > n) init(2 * m);
        return _fac[m];
    }
    Z invfac(int m) {
        if (m > n) init(2 * m);
        return _invfac[m];
    }
    Z inv(int m) {
        if (m > n) init(2 * m);
        return _inv[m];
    }
    Z binom(int n, int m) {
        if (n < m || m < 0) return 0;
        return fac(n) * invfac(m) * invfac(n - m);
    }
} comb;
"""
